// source: gra.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.Dolaczanie', null, global);
goog.exportSymbol('proto.Karta', null, global);
goog.exportSymbol('proto.KolorZolwia', null, global);
goog.exportSymbol('proto.KonfiguracjaGry', null, global);
goog.exportSymbol('proto.NowaGraInfo', null, global);
goog.exportSymbol('proto.Pole', null, global);
goog.exportSymbol('proto.RuchGracza', null, global);
goog.exportSymbol('proto.StanGry', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.KonfiguracjaGry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.KonfiguracjaGry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.KonfiguracjaGry.displayName = 'proto.KonfiguracjaGry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NowaGraInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NowaGraInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NowaGraInfo.displayName = 'proto.NowaGraInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Dolaczanie = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Dolaczanie, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Dolaczanie.displayName = 'proto.Dolaczanie';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StanGry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StanGry.repeatedFields_, null);
};
goog.inherits(proto.StanGry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StanGry.displayName = 'proto.StanGry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Pole = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Pole.repeatedFields_, null);
};
goog.inherits(proto.Pole, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Pole.displayName = 'proto.Pole';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RuchGracza = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RuchGracza, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RuchGracza.displayName = 'proto.RuchGracza';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.KonfiguracjaGry.prototype.toObject = function(opt_includeInstance) {
  return proto.KonfiguracjaGry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.KonfiguracjaGry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KonfiguracjaGry.toObject = function(includeInstance, msg) {
  var f, obj = {
    liczbagraczy: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.KonfiguracjaGry}
 */
proto.KonfiguracjaGry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.KonfiguracjaGry;
  return proto.KonfiguracjaGry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.KonfiguracjaGry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.KonfiguracjaGry}
 */
proto.KonfiguracjaGry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLiczbagraczy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.KonfiguracjaGry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.KonfiguracjaGry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.KonfiguracjaGry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KonfiguracjaGry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLiczbagraczy();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 liczbaGraczy = 1;
 * @return {number}
 */
proto.KonfiguracjaGry.prototype.getLiczbagraczy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.KonfiguracjaGry} returns this
 */
proto.KonfiguracjaGry.prototype.setLiczbagraczy = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NowaGraInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.NowaGraInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NowaGraInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NowaGraInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    graid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NowaGraInfo}
 */
proto.NowaGraInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NowaGraInfo;
  return proto.NowaGraInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NowaGraInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NowaGraInfo}
 */
proto.NowaGraInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGraid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NowaGraInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NowaGraInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NowaGraInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NowaGraInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGraid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string graID = 1;
 * @return {string}
 */
proto.NowaGraInfo.prototype.getGraid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.NowaGraInfo} returns this
 */
proto.NowaGraInfo.prototype.setGraid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Dolaczanie.prototype.toObject = function(opt_includeInstance) {
  return proto.Dolaczanie.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Dolaczanie} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dolaczanie.toObject = function(includeInstance, msg) {
  var f, obj = {
    graid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nazwagracza: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Dolaczanie}
 */
proto.Dolaczanie.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Dolaczanie;
  return proto.Dolaczanie.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Dolaczanie} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Dolaczanie}
 */
proto.Dolaczanie.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGraid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNazwagracza(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Dolaczanie.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Dolaczanie.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Dolaczanie} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dolaczanie.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGraid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNazwagracza();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string graID = 1;
 * @return {string}
 */
proto.Dolaczanie.prototype.getGraid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Dolaczanie} returns this
 */
proto.Dolaczanie.prototype.setGraid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nazwaGracza = 2;
 * @return {string}
 */
proto.Dolaczanie.prototype.getNazwagracza = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Dolaczanie} returns this
 */
proto.Dolaczanie.prototype.setNazwagracza = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StanGry.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StanGry.prototype.toObject = function(opt_includeInstance) {
  return proto.StanGry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StanGry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StanGry.toObject = function(includeInstance, msg) {
  var f, obj = {
    graid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    graczid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    twojkolor: jspb.Message.getFieldWithDefault(msg, 3, 0),
    twojekartyList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    planszaList: jspb.Message.toObjectList(msg.getPlanszaList(),
    proto.Pole.toObject, includeInstance),
    czykoniec: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    ktowygral: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StanGry}
 */
proto.StanGry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StanGry;
  return proto.StanGry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StanGry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StanGry}
 */
proto.StanGry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGraid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGraczid(value);
      break;
    case 3:
      var value = /** @type {!proto.KolorZolwia} */ (reader.readEnum());
      msg.setTwojkolor(value);
      break;
    case 4:
      var values = /** @type {!Array<!proto.Karta>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTwojekarty(values[i]);
      }
      break;
    case 5:
      var value = new proto.Pole;
      reader.readMessage(value,proto.Pole.deserializeBinaryFromReader);
      msg.addPlansza(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCzykoniec(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKtowygral(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StanGry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StanGry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StanGry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StanGry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGraid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGraczid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTwojkolor();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTwojekartyList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getPlanszaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Pole.serializeBinaryToWriter
    );
  }
  f = message.getCzykoniec();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getKtowygral();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string graID = 1;
 * @return {string}
 */
proto.StanGry.prototype.getGraid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.StanGry} returns this
 */
proto.StanGry.prototype.setGraid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string graczID = 2;
 * @return {string}
 */
proto.StanGry.prototype.getGraczid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.StanGry} returns this
 */
proto.StanGry.prototype.setGraczid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional KolorZolwia twojKolor = 3;
 * @return {!proto.KolorZolwia}
 */
proto.StanGry.prototype.getTwojkolor = function() {
  return /** @type {!proto.KolorZolwia} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.KolorZolwia} value
 * @return {!proto.StanGry} returns this
 */
proto.StanGry.prototype.setTwojkolor = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated Karta twojeKarty = 4;
 * @return {!Array<!proto.Karta>}
 */
proto.StanGry.prototype.getTwojekartyList = function() {
  return /** @type {!Array<!proto.Karta>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<!proto.Karta>} value
 * @return {!proto.StanGry} returns this
 */
proto.StanGry.prototype.setTwojekartyList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.Karta} value
 * @param {number=} opt_index
 * @return {!proto.StanGry} returns this
 */
proto.StanGry.prototype.addTwojekarty = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.StanGry} returns this
 */
proto.StanGry.prototype.clearTwojekartyList = function() {
  return this.setTwojekartyList([]);
};


/**
 * repeated Pole plansza = 5;
 * @return {!Array<!proto.Pole>}
 */
proto.StanGry.prototype.getPlanszaList = function() {
  return /** @type{!Array<!proto.Pole>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Pole, 5));
};


/**
 * @param {!Array<!proto.Pole>} value
 * @return {!proto.StanGry} returns this
*/
proto.StanGry.prototype.setPlanszaList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Pole=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Pole}
 */
proto.StanGry.prototype.addPlansza = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Pole, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.StanGry} returns this
 */
proto.StanGry.prototype.clearPlanszaList = function() {
  return this.setPlanszaList([]);
};


/**
 * optional bool CzyKoniec = 6;
 * @return {boolean}
 */
proto.StanGry.prototype.getCzykoniec = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.StanGry} returns this
 */
proto.StanGry.prototype.setCzykoniec = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int32 KtoWygral = 7;
 * @return {number}
 */
proto.StanGry.prototype.getKtowygral = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.StanGry} returns this
 */
proto.StanGry.prototype.setKtowygral = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Pole.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Pole.prototype.toObject = function(opt_includeInstance) {
  return proto.Pole.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Pole} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Pole.toObject = function(includeInstance, msg) {
  var f, obj = {
    zolwieList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Pole}
 */
proto.Pole.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Pole;
  return proto.Pole.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Pole} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Pole}
 */
proto.Pole.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var values = /** @type {!Array<!proto.KolorZolwia>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addZolwie(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Pole.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Pole.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Pole} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Pole.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZolwieList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * repeated KolorZolwia zolwie = 2;
 * @return {!Array<!proto.KolorZolwia>}
 */
proto.Pole.prototype.getZolwieList = function() {
  return /** @type {!Array<!proto.KolorZolwia>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.KolorZolwia>} value
 * @return {!proto.Pole} returns this
 */
proto.Pole.prototype.setZolwieList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.KolorZolwia} value
 * @param {number=} opt_index
 * @return {!proto.Pole} returns this
 */
proto.Pole.prototype.addZolwie = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Pole} returns this
 */
proto.Pole.prototype.clearZolwieList = function() {
  return this.setZolwieList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RuchGracza.prototype.toObject = function(opt_includeInstance) {
  return proto.RuchGracza.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RuchGracza} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RuchGracza.toObject = function(includeInstance, msg) {
  var f, obj = {
    graid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    graczid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    zagranakarta: jspb.Message.getFieldWithDefault(msg, 3, 0),
    kolorwybrany: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RuchGracza}
 */
proto.RuchGracza.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RuchGracza;
  return proto.RuchGracza.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RuchGracza} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RuchGracza}
 */
proto.RuchGracza.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGraid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGraczid(value);
      break;
    case 3:
      var value = /** @type {!proto.Karta} */ (reader.readEnum());
      msg.setZagranakarta(value);
      break;
    case 4:
      var value = /** @type {!proto.KolorZolwia} */ (reader.readEnum());
      msg.setKolorwybrany(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RuchGracza.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RuchGracza.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RuchGracza} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RuchGracza.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGraid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGraczid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getZagranakarta();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getKolorwybrany();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string graID = 1;
 * @return {string}
 */
proto.RuchGracza.prototype.getGraid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.RuchGracza} returns this
 */
proto.RuchGracza.prototype.setGraid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string graczID = 2;
 * @return {string}
 */
proto.RuchGracza.prototype.getGraczid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.RuchGracza} returns this
 */
proto.RuchGracza.prototype.setGraczid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Karta zagranaKarta = 3;
 * @return {!proto.Karta}
 */
proto.RuchGracza.prototype.getZagranakarta = function() {
  return /** @type {!proto.Karta} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.Karta} value
 * @return {!proto.RuchGracza} returns this
 */
proto.RuchGracza.prototype.setZagranakarta = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional KolorZolwia kolorWybrany = 4;
 * @return {!proto.KolorZolwia}
 */
proto.RuchGracza.prototype.getKolorwybrany = function() {
  return /** @type {!proto.KolorZolwia} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.KolorZolwia} value
 * @return {!proto.RuchGracza} returns this
 */
proto.RuchGracza.prototype.setKolorwybrany = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.KolorZolwia = {
  XXX: 0,
  RED: 1,
  GREEN: 2,
  BLUE: 3,
  YELLOW: 4,
  PURPLE: 5
};

/**
 * @enum {number}
 */
proto.Karta = {
  XX: 0,
  R1: 1,
  R2: 2,
  R1B: 3,
  G1: 4,
  G2: 5,
  G1B: 6,
  B1: 7,
  B2: 8,
  B1B: 9,
  Y1: 10,
  Y2: 11,
  Y1B: 12,
  P1: 13,
  P2: 14,
  P1B: 15,
  L1: 16,
  L2: 17,
  A1: 18,
  A1B: 19
};

goog.object.extend(exports, proto);
